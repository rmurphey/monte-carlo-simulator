{
  "name": "monte-carlo-simulator",
  "version": "1.1.0",
  "description": "Business decision framework with Monte Carlo risk analysis - instant via npx",
  "keywords": [
    "monte-carlo",
    "business-analysis",
    "roi",
    "risk-assessment",
    "decision-making",
    "simulation",
    "business-intelligence",
    "npx"
  ],
  "bin": {
    "monte-carlo-simulator": "./dist/cli/index.js",
    "mcs": "./dist/cli/index.js"
  },
  "files": [
    "dist/",
    "templates/",
    "examples/",
    "docs/",
    "README.md"
  ],
  "scripts": {
    "dev": "tsx watch src/cli/index.ts",
    "build": "tsc",
    "build:web": "tsc --project tsconfig.web.json && cp src/web/index.html dist/web/",
    "dev:web": "vite",
    "dev:web:open": "VITE_OPEN_BROWSER=true vite",
    "build:web:vite": "vite build",
    "preview:web": "vite preview",
    "preview:web:open": "VITE_OPEN_BROWSER=true vite preview",
    "test": "vitest --run --exclude=src/test/vite-integration.test.ts",
    "test:all": "npm run test && npm run test:web",
    "test:web": "vitest --run src/test/vite-integration.test.ts",
    "test:web:full": "NODE_ENV=test vitest --run src/test/vite-dev-server.test.ts",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "lint": "eslint . --ext ts --report-unused-disable-directives",
    "lint:fix": "eslint . --ext ts --fix",
    "format": "prettier --write .",
    "typecheck": "tsc --noEmit",
    "cli": "tsx src/cli/index.ts",
    "sim": "tsx src/cli/index.ts interactive",
    "run": "tsx src/cli/index.ts run",
    "test:docs": "tsx scripts/test-docs.ts",
    "context:docs": "bash scripts/command-context.sh docs",
    "context:todo": "bash scripts/command-context.sh todo", 
    "context:archive": "bash scripts/command-context.sh archive",
    "context:commit": "bash scripts/command-context.sh commit",
    "context:next": "bash scripts/command-context.sh next",
    "context:hygiene": "bash scripts/command-context.sh hygiene",
    "context:push": "bash scripts/command-context.sh push",
    "context:build": "bash scripts/command-context.sh build",
    "validate:yaml": "find examples/ -name '*.yaml' -exec npm run cli validate {} \\; 2>/dev/null || true",
    "validate:json": "find . -name '*.json' -not -path './node_modules/*' -not -path './coverage/*' -exec node -e 'JSON.parse(require(\"fs\").readFileSync(\"{}\", \"utf8\"))' \\;",
    "test:agent-apis": "npm run cli list >/dev/null && npm run cli -- run examples/simulations/simple-roi-analysis.yaml --iterations 5 >/dev/null && npm run cli -- run examples/simulations/simple-roi-analysis.yaml --list-params >/dev/null",
    "check:formatting": "npm run lint",
    "check:file-sizes": "git diff --cached --name-only | head -20 | while read file; do [ -f \"$file\" ] && [ $(wc -c < \"$file\") -gt 1048576 ] && echo \"Large file: $file\"; done || true",
    "check:secrets": "./scripts/check-secrets.sh",
    "push": "git push",
    "push-force": "git push --force-with-lease",
    "prepare": "husky",
    "validate:repo-clean": "test -z \"$(git status --porcelain)\" || (echo '❌ Repository has uncommitted changes' && exit 1)",
    "validate:no-unpushed": "test -z \"$(git log @{u}..HEAD --oneline 2>/dev/null)\" || (echo '❌ Repository has unpushed commits' && exit 1)",
    "validate:dist-current": "test dist -nt src || npm run build",
    "quality:all": "NODE_ENV=test npm run test && npm run build && npm run lint",
    "version:analyze": "git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD --oneline",
    "commit:size": "git diff --cached --stat | tail -1",
    "status:full": "git status && echo '\\n📊 Unpushed commits:' && git log @{u}..HEAD --oneline 2>/dev/null || echo 'None'",
    "claude:check": "npm run typecheck && npm run lint && npm run test && echo '✅ All quality checks passed'"
  },
  "lint-staged": {
    "src/{framework,web}/**/*.ts": [
      "eslint --fix",
      "npm run typecheck"
    ],
    "src/cli/**/!(config)/**/*.ts": [
      "eslint --fix --max-warnings 143"
    ],
    "src/test/**/*.ts": [
      "eslint --fix --max-warnings 143"
    ],
    "scripts/**/*.ts": [
      "eslint --fix --max-warnings 143"
    ],
    "vite.config.ts": [
      "eslint --fix --max-warnings 143"
    ],
    "*.config.ts": [
      "eslint --fix --max-warnings 143"
    ],
    "{examples,simulations}/**/*.{yaml,yml}": [
      "bash -c 'for file in \"$@\"; do npm run cli validate \"$file\"; done' _"
    ],
    "*.json": [
      "node -e \"JSON.parse(require('fs').readFileSync(process.argv[1], 'utf8'))\""
    ]
  },
  "dependencies": {
    "ajv": "^8.17.1",
    "chalk": "^5.5.0",
    "commander": "^14.0.0",
    "inquirer": "^12.9.0",
    "js-yaml": "^4.1.0",
    "yaml": "^2.8.1"
  },
  "devDependencies": {
    "@playwright/test": "^1.54.2",
    "@types/inquirer": "^9.0.8",
    "@types/js-yaml": "^4.0.9",
    "@types/node-fetch": "^2.6.13",
    "@typescript-eslint/eslint-plugin": "^8.39.1",
    "@typescript-eslint/parser": "^8.39.1",
    "@vitest/coverage-v8": "^1.1.0",
    "@vitest/ui": "^1.1.0",
    "eslint": "^8.55.0",
    "husky": "^9.1.7",
    "jsdom": "^26.1.0",
    "lint-staged": "^16.1.4",
    "node-fetch": "^3.3.2",
    "playwright": "^1.54.2",
    "prettier": "^3.1.1",
    "tsx": "^4.20.3",
    "typescript": "^5.2.2",
    "vite": "^7.1.2",
    "vitest": "^1.1.0"
  }
}
