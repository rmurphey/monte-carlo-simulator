name: Software Project Timeline (Conservative Estimate)
category: Technology
description: Conservative timeline estimation with experienced team and buffer time
version: 1.0.0
tags: [software-development, project-management, conservative, buffer-time]

parameters:
  - key: storyPoints
    label: Total Story Points
    type: number
    default: 400         # Smaller, well-defined scope
    min: 50
    max: 5000
    step: 10
    description: Conservative scope with well-defined requirements

  - key: teamSize
    label: Development Team Size
    type: number
    default: 5           # Optimal team size for coordination
    min: 2
    max: 20
    step: 1
    description: Experienced team with good coordination

  - key: teamExperience
    label: Team Experience Level
    type: select
    default: senior      # Experienced team reduces risk
    options: [junior, mixed, senior, expert]
    description: Senior team with domain expertise

  - key: projectComplexity
    label: Project Complexity
    type: select
    default: medium      # Moderate complexity, well-understood domain
    options: [low, medium, high, very-high]
    description: Medium complexity with established patterns

  - key: requirementsStability
    label: Requirements Stability
    type: select
    default: stable      # Stable requirements reduce scope creep
    options: [stable, moderate, changing, volatile]
    description: Well-defined, stable requirements with minimal changes

  - key: hasLegacyIntegration
    label: Legacy System Integration
    type: boolean
    default: false       # Avoid legacy complexity
    description: Minimal legacy integration to reduce risk

  - key: testingStrategy
    label: Testing Strategy
    type: select
    default: comprehensive  # Thorough testing prevents delays
    options: [manual, mixed, automated, comprehensive]
    description: Comprehensive testing to catch issues early

  - key: deploymentComplexity
    label: Deployment Complexity
    type: select
    default: simple      # Simple deployment reduces risk
    options: [simple, moderate, complex, enterprise]
    description: Simple deployment process with minimal dependencies

groups:
  - name: Conservative Scope
    description: Well-defined scope with experienced team
    parameters: [storyPoints, teamSize, teamExperience]
    
  - name: Risk Mitigation
    description: Low-risk project characteristics
    parameters: [projectComplexity, requirementsStability, hasLegacyIntegration]
    
  - name: Quality Assurance
    description: Comprehensive testing and simple deployment
    parameters: [testingStrategy, deploymentComplexity]

outputs:
  - key: estimatedWeeks
    label: Estimated Duration (Weeks)
    description: Total project duration in weeks from start to deployment

  - key: confidenceInterval
    label: Confidence Range (Weeks)
    description: Range representing 80% confidence interval around the estimate

  - key: riskAdjustment
    label: Risk Adjustment Factor
    description: Multiplier applied to base estimate due to risk factors

  - key: teamVelocity
    label: Weekly Team Velocity
    description: Estimated story points completed per week by the team

simulation:
  logic: |
    // Conservative base velocity by team experience
    const baseVelocityPerDev = {
      junior: 8,
      mixed: 12,
      senior: 16,    // Conservative scenario uses senior team
      expert: 20
    }
    
    // Team efficiency with conservative estimates
    const teamEfficiency = teamSize <= 4 ? 1.0 : 
                          teamSize <= 8 ? 0.95 : // Conservative efficiency
                          teamSize <= 12 ? 0.85 : 0.75
    
    // Calculate base weekly velocity
    const baseVelocity = baseVelocityPerDev[teamExperience] * teamSize * teamEfficiency
    
    // Conservative complexity multipliers
    const complexityFactors = {
      low: 0.8,
      medium: 1.0,      // Conservative uses medium complexity
      high: 1.3,
      'very-high': 1.7
    }
    
    // Conservative stability factors
    const stabilityFactors = {
      stable: 1.0,      // Conservative uses stable requirements
      moderate: 1.15,
      changing: 1.35,
      volatile: 1.6
    }
    
    // Conservative testing factors
    const testingFactors = {
      manual: 1.4,
      mixed: 1.2,
      automated: 1.0,
      comprehensive: 1.15  // Slightly more time but better quality
    }
    
    // Conservative deployment factors
    const deploymentFactors = {
      simple: 1.0,      // Conservative uses simple deployment
      moderate: 1.1,
      complex: 1.25,
      enterprise: 1.4
    }
    
    // Conservative legacy factor
    const legacyFactor = hasLegacyIntegration ? 1.3 : 1.0  // No legacy in conservative
    
    // Calculate risk adjustment with conservative multipliers
    const riskAdjustment = complexityFactors[projectComplexity] * 
                          stabilityFactors[requirementsStability] *
                          testingFactors[testingStrategy] *
                          deploymentFactors[deploymentComplexity] *
                          legacyFactor
    
    // Conservative random variation (less uncertainty)
    const randomVariation = 0.9 + random() * 0.2  // ±10% variation
    
    // Calculate adjusted velocity
    const adjustedVelocity = (baseVelocity / riskAdjustment) * randomVariation
    
    // Calculate timeline with conservative buffer
    const estimatedWeeks = storyPoints / adjustedVelocity
    
    // Conservative confidence interval (±20%)
    const confidenceRange = estimatedWeeks * 0.2
    
    // Add conservative buffer (15-25%)
    const bufferFactor = 1.15 + random() * 0.1
    const finalEstimateWeeks = estimatedWeeks * bufferFactor
    
    return {
      estimatedWeeks: round(finalEstimateWeeks * 10) / 10,
      confidenceInterval: round(confidenceRange * 10) / 10,
      riskAdjustment: round(riskAdjustment * 100) / 100,
      teamVelocity: round(adjustedVelocity * 10) / 10
    }