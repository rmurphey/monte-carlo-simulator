name: Software Project Timeline (Neutral Estimate)
category: Technology
description: Balanced timeline estimation with typical team composition and moderate risk factors
version: 1.0.0
tags: [software-development, project-management, neutral, baseline]

parameters:
  - key: featureCount
    label: Total Features to Deliver
    type: number
    default: 25          # Standard project scope
    min: 5
    max: 200
    step: 1
    description: Typical project scope with standard feature set

  - key: teamSize
    label: Development Team Size
    type: number
    default: 6           # Standard team size
    min: 2
    max: 20
    step: 1
    description: Standard development team size

  - key: teamExperience
    label: Team Experience Level
    type: select
    default: mixed       # Typical mixed experience team
    options: [junior, mixed, senior, expert]
    description: Mixed team with junior and senior developers

  - key: projectComplexity
    label: Project Complexity
    type: select
    default: medium      # Standard medium complexity
    options: [low, medium, high, very-high]
    description: Medium complexity project with standard technical challenges

  - key: requirementsStability
    label: Requirements Stability
    type: select
    default: moderate    # Some changes expected
    options: [stable, moderate, changing, volatile]
    description: Moderate requirement changes expected during development

  - key: hasLegacyIntegration
    label: Legacy System Integration
    type: boolean
    default: false       # No legacy complexity
    description: Clean greenfield project without legacy constraints

  - key: testingStrategy
    label: Testing Strategy
    type: select
    default: automated   # Standard automated testing
    options: [manual, mixed, automated, comprehensive]
    description: Automated testing with standard coverage

  - key: deploymentComplexity
    label: Deployment Complexity
    type: select
    default: moderate    # Standard deployment process
    options: [simple, moderate, complex, enterprise]
    description: Standard deployment with CI/CD pipeline

groups:
  - name: Balanced Scope
    description: Standard project scope and team composition
    parameters: [storyPoints, teamSize, teamExperience]
    
  - name: Moderate Risk
    description: Typical project risk factors
    parameters: [projectComplexity, requirementsStability, hasLegacyIntegration]
    
  - name: Standard Process
    description: Standard testing and deployment practices
    parameters: [testingStrategy, deploymentComplexity]

outputs:
  - key: estimatedWeeks
    label: Estimated Duration (Weeks)
    description: Total project duration in weeks from start to deployment

  - key: confidenceInterval
    label: Confidence Range (Weeks)
    description: Range representing 80% confidence interval around the estimate

  - key: riskAdjustment
    label: Risk Adjustment Factor
    description: Multiplier applied to base estimate due to risk factors

  - key: weeklyFeatureVelocity
    label: Weekly Feature Delivery Rate
    description: Estimated features completed per week by the team

simulation:
  logic: |
    // Neutral base feature velocity by team experience
    const baseFeaturesPerDevPerWeek = {
      junior: 0.4,
      mixed: 0.6,       // Neutral scenario uses mixed team
      senior: 0.8,
      expert: 1.1
    }
    
    // Standard team efficiency
    const teamEfficiency = teamSize <= 4 ? 1.0 : 
                          teamSize <= 8 ? 0.9 :   // Standard efficiency curve
                          teamSize <= 12 ? 0.8 : 0.7
    
    // Calculate base weekly feature velocity
    const baseVelocity = baseFeaturesPerDevPerWeek[teamExperience] * teamSize * teamEfficiency
    
    // Neutral complexity multipliers
    const complexityFactors = {
      low: 0.8,
      medium: 1.0,      // Neutral uses medium complexity
      high: 1.3,
      'very-high': 1.7
    }
    
    // Neutral stability factors
    const stabilityFactors = {
      stable: 1.0,
      moderate: 1.15,   // Neutral uses moderate stability
      changing: 1.35,
      volatile: 1.6
    }
    
    // Neutral testing factors
    const testingFactors = {
      manual: 1.4,
      mixed: 1.2,
      automated: 1.0,   // Neutral uses automated testing
      comprehensive: 1.1
    }
    
    // Neutral deployment factors
    const deploymentFactors = {
      simple: 1.0,
      moderate: 1.1,    // Neutral uses moderate deployment
      complex: 1.25,
      enterprise: 1.4
    }
    
    // No legacy factor in neutral scenario
    const legacyFactor = hasLegacyIntegration ? 1.3 : 1.0
    
    // Calculate risk adjustment with neutral multipliers
    const riskAdjustment = complexityFactors[projectComplexity] * 
                          stabilityFactors[requirementsStability] *
                          testingFactors[testingStrategy] *
                          deploymentFactors[deploymentComplexity] *
                          legacyFactor
    
    // Standard random variation
    const randomVariation = 0.8 + random() * 0.4  // ±20% variation
    
    // Calculate adjusted velocity
    const adjustedVelocity = (baseVelocity / riskAdjustment) * randomVariation
    
    // Calculate timeline
    const estimatedWeeks = featureCount / adjustedVelocity
    
    // Standard confidence interval (±30% for 80% confidence)
    const confidenceRange = estimatedWeeks * 0.3
    
    // Standard buffer for planning and deployment (10-20%)
    const bufferFactor = 1.1 + random() * 0.1
    const finalEstimateWeeks = estimatedWeeks * bufferFactor
    
    return {
      estimatedWeeks: round(finalEstimateWeeks * 10) / 10,
      confidenceInterval: round(confidenceRange * 10) / 10,
      riskAdjustment: round(riskAdjustment * 100) / 100,
      weeklyFeatureVelocity: round(adjustedVelocity * 10) / 10
    }