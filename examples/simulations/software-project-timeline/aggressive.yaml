name: Software Project Timeline (Aggressive Estimate)
category: Technology
description: Optimistic timeline with tight deadlines, ambitious scope, and high-risk factors
version: 1.0.0
tags: [software-development, project-management, aggressive, fast-delivery]

parameters:
  - key: featureCount
    label: Total Features to Deliver
    type: number
    default: 45          # Aggressive: Large feature set
    min: 5
    max: 200
    step: 1
    description: Ambitious feature scope with comprehensive functionality

  - key: teamSize
    label: Development Team Size
    type: number
    default: 12          # Large team for faster delivery
    min: 2
    max: 20
    step: 1
    description: Large team to accelerate development

  - key: teamExperience
    label: Team Experience Level
    type: select
    default: mixed       # Mixed team (not all senior due to scaling needs)
    options: [junior, mixed, senior, expert]
    description: Mixed experience team due to rapid scaling

  - key: projectComplexity
    label: Project Complexity
    type: select
    default: high        # Aggressive projects tend to be complex
    options: [low, medium, high, very-high]
    description: High complexity with cutting-edge technology requirements

  - key: requirementsStability
    label: Requirements Stability
    type: select
    default: changing    # Fast-moving projects have changing requirements
    options: [stable, moderate, changing, volatile]
    description: Rapidly evolving requirements due to market pressures

  - key: hasLegacyIntegration
    label: Legacy System Integration
    type: boolean
    default: true        # Aggressive timelines often require legacy integration
    description: Must integrate with existing systems for faster go-to-market

  - key: testingStrategy
    label: Testing Strategy
    type: select
    default: mixed       # Balanced testing under time pressure
    options: [manual, mixed, automated, comprehensive]
    description: Mixed testing approach balancing speed and quality

  - key: deploymentComplexity
    label: Deployment Complexity
    type: select
    default: complex     # Aggressive projects often have complex deployment needs
    options: [simple, moderate, complex, enterprise]
    description: Complex deployment with multiple environments and integrations

groups:
  - name: Ambitious Scope
    description: Large feature set with scaled team
    parameters: [featureCount, teamSize, teamExperience]
    
  - name: High Risk Factors
    description: Complex technical and business challenges
    parameters: [projectComplexity, requirementsStability, hasLegacyIntegration]
    
  - name: Accelerated Process
    description: Fast delivery with complex deployment requirements
    parameters: [testingStrategy, deploymentComplexity]

outputs:
  - key: estimatedWeeks
    label: Estimated Duration (Weeks)
    description: Total project duration in weeks from start to deployment

  - key: confidenceInterval
    label: Confidence Range (Weeks)
    description: Range representing 80% confidence interval around the estimate

  - key: riskAdjustment
    label: Risk Adjustment Factor
    description: Multiplier applied to base estimate due to risk factors

  - key: weeklyFeatureVelocity
    label: Weekly Feature Delivery Rate
    description: Estimated features completed per week by the team

simulation:
  logic: |
    // Aggressive base feature velocity by team experience
    const baseFeaturesPerDevPerWeek = {
      junior: 0.3,
      mixed: 0.5,       // Aggressive scenario uses mixed team
      senior: 0.7,
      expert: 1.0
    }
    
    // Aggressive team efficiency (large teams have coordination challenges)
    const teamEfficiency = teamSize <= 4 ? 1.0 : 
                          teamSize <= 8 ? 0.85 :  // Aggressive efficiency penalties
                          teamSize <= 12 ? 0.7 :  // Large team coordination overhead
                          0.6
    
    // Calculate base weekly feature velocity
    const baseVelocity = baseFeaturesPerDevPerWeek[teamExperience] * teamSize * teamEfficiency
    
    // Aggressive complexity multipliers (higher impact)
    const complexityFactors = {
      low: 0.8,
      medium: 1.0,
      high: 1.4,        // Aggressive projects face higher complexity impact
      'very-high': 1.8
    }
    
    // Aggressive stability factors (changing requirements hurt more)
    const stabilityFactors = {
      stable: 1.0,
      moderate: 1.2,
      changing: 1.4,    // Aggressive scenario uses changing requirements
      volatile: 1.7
    }
    
    // Aggressive testing factors (time pressure affects quality)
    const testingFactors = {
      manual: 1.5,
      mixed: 1.25,      // Aggressive uses mixed testing under pressure
      automated: 1.0,
      comprehensive: 1.15
    }
    
    // Aggressive deployment factors (complex deployments are riskier under pressure)
    const deploymentFactors = {
      simple: 1.0,
      moderate: 1.15,
      complex: 1.35,    // Aggressive uses complex deployment
      enterprise: 1.5
    }
    
    // Aggressive legacy factor (integration under pressure is harder)
    const legacyFactor = hasLegacyIntegration ? 1.4 : 1.0  // Higher penalty
    
    // Calculate risk adjustment with aggressive multipliers
    const riskAdjustment = complexityFactors[projectComplexity] * 
                          stabilityFactors[requirementsStability] *
                          testingFactors[testingStrategy] *
                          deploymentFactors[deploymentComplexity] *
                          legacyFactor
    
    // Aggressive random variation (higher uncertainty due to pressure)
    const randomVariation = 0.7 + random() * 0.6  // ±30% variation
    
    // Calculate adjusted velocity
    const adjustedVelocity = (baseVelocity / riskAdjustment) * randomVariation
    
    // Calculate timeline
    const estimatedWeeks = featureCount / adjustedVelocity
    
    // Aggressive confidence interval (±40% due to higher uncertainty)
    const confidenceRange = estimatedWeeks * 0.4
    
    // Minimal buffer in aggressive scenario (5-15%)
    const bufferFactor = 1.05 + random() * 0.1
    const finalEstimateWeeks = estimatedWeeks * bufferFactor
    
    return {
      estimatedWeeks: round(finalEstimateWeeks * 10) / 10,
      confidenceInterval: round(confidenceRange * 10) / 10,
      riskAdjustment: round(riskAdjustment * 100) / 100,
      weeklyFeatureVelocity: round(adjustedVelocity * 10) / 10
    }